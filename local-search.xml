<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023冬训week1</title>
    <link href="/2023/01/07/2023%E5%86%AC%E8%AE%ADweek1/"/>
    <url>/2023/01/07/2023%E5%86%AC%E8%AE%ADweek1/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝桥模拟赛1"><a href="#蓝桥模拟赛1" class="headerlink" title="蓝桥模拟赛1"></a>蓝桥模拟赛1</h1><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p><a href="https://www.luogu.com.cn/problem/P8599?contestId=95102">A</a></p><p>剪枝dfs,枚举分子,整数部分,分子,分母的数位和小于等于9剪枝</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#define int long long</span><br><span class="hljs-keyword">using</span> namespace std;<br>const <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br>const <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>const <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-type">int</span> vis[<span class="hljs-number">11</span>];<br><span class="hljs-type">int</span> tx;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> <span class="hljs-keyword">as</span>=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> cnt[<span class="hljs-number">11</span>];<br><span class="hljs-type">int</span> cs[maxn];<br><span class="hljs-type">bool</span> ck()&#123;<br>    <span class="hljs-keyword">if</span>(cnt[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> tas=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(cnt[i]&gt;<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(cnt[i]==<span class="hljs-number">1</span>)tas++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tas==<span class="hljs-number">9</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> dfs(<span class="hljs-type">int</span> tot,<span class="hljs-type">int</span> now)&#123;<br>    <span class="hljs-keyword">if</span>(tot&gt;=<span class="hljs-number">5</span>)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">if</span>(tot&gt;=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = now; i / now &lt;= n; i += now) &#123;<br>                <span class="hljs-type">int</span> tp = i;<br>                <span class="hljs-type">int</span> tc=tot;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">9</span>;j++)cnt[j]=vis[j];<br>                <span class="hljs-keyword">while</span> (tp) &#123;<br>                    cnt[tp % <span class="hljs-number">10</span>]++;<br>                    tp /= <span class="hljs-number">10</span>;<br>                    tc++;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(tc&gt;<span class="hljs-number">9</span>)break;<br>                    <span class="hljs-type">int</span> tpp=n-i/now;<br>                    <span class="hljs-keyword">while</span>(tpp)&#123;<br>                        cnt[tpp%<span class="hljs-number">10</span>]++;<br>                        tpp/=<span class="hljs-number">10</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(ck()) &#123;<br>                        <span class="hljs-keyword">as</span>++;<br>                    &#125;<br><br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i]) &#123;<br>            vis[i] = <span class="hljs-number">1</span>;<br>            dfs(tot + <span class="hljs-number">1</span>, now * <span class="hljs-number">10</span> + i);<br>            vis[i]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-type">void</span> solve() &#123;<br>    cin&gt;&gt;n;<br>    dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    cout&lt;&lt;<span class="hljs-keyword">as</span>&lt;&lt;endl;<br>&#125;<br><br>int32_t main() &#123;<br>    ios::sync_with_stdio(<span class="hljs-keyword">false</span>);<br>    cin.tie(<span class="hljs-number">0</span>), cout.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> T=<span class="hljs-number">1</span>;<br>//    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T<span class="hljs-comment">--) &#123;</span><br>        solve();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><p><a href="https://www.luogu.com.cn/problem/P8684?contestId=95102">D</a></p><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p><a href="https://www.luogu.com.cn/problem/P8683?contestId=95102">E</a></p><p>因为可以随意造后缀表达式,所以可以随意填括号,因此贪心前n个正前m个负会有问题,因为可以通过添括号使得原本应该是正号的的负数转换为负号或者原本是负号的正数转换为正号,所以应该对正负号的数量和原数组的正负数关系进行分类讨论</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-type">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> ts=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n+m+<span class="hljs-number">1</span>;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        ts+=<span class="hljs-built_in">abs</span>(a[i]);<br>        sum+=a[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n+m+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>)&#123;<br>        cout&lt;&lt;sum&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(a[n+m+<span class="hljs-number">1</span>]&lt;<span class="hljs-number">0</span>)&#123;<br>            ts+=<span class="hljs-number">2</span>*a[n+m+<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]&gt;<span class="hljs-number">0</span>)&#123;<br>            ts-=<span class="hljs-number">2</span>*a[<span class="hljs-number">1</span>];<br>        &#125;<br>        cout&lt;&lt;ts&lt;&lt;endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> T=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//    cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>类似的题:<a href="https://codeforces.com/gym/103470/problem/M">Windblume Festival</a></p><p>虽然有位置关系限制,其实影响不大,同样是分类讨论</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, maxn = -INF, minn = INF, f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">if</span> (a[i] &gt; <span class="hljs-number">0</span>) f = <span class="hljs-number">1</span>;<br>        minn = <span class="hljs-built_in">min</span>(minn, a[i]);<br>        maxn = <span class="hljs-built_in">max</span>(maxn, a[i]);<br>        sum += <span class="hljs-built_in">abs</span>(a[i]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) &#123;<br>        cout &lt;&lt; a[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!f) &#123;<br>        sum += <span class="hljs-number">2</span> * maxn;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (minn &gt;= <span class="hljs-number">0</span>) &#123;<br>        sum -= <span class="hljs-number">2</span> * minn;<br>    &#125;<br>    cout &lt;&lt; sum &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p><a href="https://www.luogu.com.cn/problem/P8682?contestId=95102">F</a></p><p>排序后两两差值取gcd,注意特判两数相等即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-type">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>    <span class="hljs-type">int</span> tcz;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> cz=a[i]-a[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">if</span>(cz==<span class="hljs-number">0</span>)&#123;<br>            cout&lt;&lt;n&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">2</span>)tcz=cz;<br>        <span class="hljs-keyword">else</span> tcz=__gcd(tcz,cz);<br>    &#125;<br>    cout&lt;&lt;(a[n]-a[<span class="hljs-number">1</span>])/tcz+<span class="hljs-number">1</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> T=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//    cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="CF-Hello-2023"><a href="#CF-Hello-2023" class="headerlink" title="CF Hello 2023"></a>CF Hello 2023</h1><p><a href="https://codeforces.com/contest/1779">Hello 2023</a></p><h2 id="A-1"><a href="#A-1" class="headerlink" title="A"></a>A</h2><p>有转向为L,R的灯,照的距离无限,问是否能动一次就照满</p><p>找出一对RL即可,有LR就存L的坐标进行操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-type">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;R&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;L&#x27;</span>)&#123;<br>                cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">return</span> ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;R&#x27;</span>)&#123;<br>                cout&lt;&lt;i+<span class="hljs-number">1</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">return</span> ;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> T=<span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>每次操作可以让一个数变成他的相反数,要使第k个前缀和是所有前缀和的最小值</p><p>从第k个数出发,往前的前缀和一直要小于0,往后的前缀和一直要大于0,如果出现不符合的,就最贪心改极值,并且因为一直是小于0或大于0的,那改一次极值就一定可以符合条件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-type">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> as=<span class="hljs-number">0</span>;<br>    priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt;&gt;q;<br>    priority_queue&lt;<span class="hljs-type">int</span>&gt;q2;<br><span class="hljs-comment">//    q.push(1);</span><br><span class="hljs-comment">//    q.push(2);</span><br><span class="hljs-comment">//    q.push(3);</span><br><span class="hljs-comment">//    while(!q.empty())&#123;</span><br><span class="hljs-comment">//        cout&lt;&lt;q.top()&lt;&lt;endl;</span><br><span class="hljs-comment">//        q.pop();</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    cout&lt;&lt;&quot;X&quot;&lt;&lt;endl;</span><br>    <span class="hljs-type">int</span> ta=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        ta+=a[i];<br>    &#125;<br>    <span class="hljs-type">int</span> now1=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = m ;i&gt;=<span class="hljs-number">2</span>;i--)&#123;<br>        now1=now1+a[i];<br>        q2.<span class="hljs-built_in">push</span>(a[i]);<br>        <span class="hljs-keyword">if</span>(now1&gt;<span class="hljs-number">0</span>)&#123;<br>            now1+=<span class="hljs-number">2</span>*(<span class="hljs-number">-1</span>)*q2.<span class="hljs-built_in">top</span>();<br>            as++;<br>            q2.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br>    now1=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m+<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        now1=now1+a[i];<br>        q.<span class="hljs-built_in">push</span>(a[i]);<br>        <span class="hljs-keyword">if</span>(now1&lt;<span class="hljs-number">0</span>)&#123;<br>            now1+=<span class="hljs-number">2</span>*(<span class="hljs-number">-1</span>)*q.<span class="hljs-built_in">top</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            as++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;as&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> T=<span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D-1"><a href="#D-1" class="headerlink" title="D"></a>D</h2><p>给原本的数组a,目标数组b,有m把剪刀,每把剪刀可以任意取一段区间,使得区间的所有大于xi数都变为xi,问是否a数组能变成b数组</p><p>从剪刀入手,剪刀的xi小于等于bi是其实完全没用影响,即可以剪少不能剪多,相当于每把剪刀尽量贪心用得最多,那可以把每根目标头发的坐标都存起来.枚举所有剪刀,每次都可以剪去一段连续区间极大值小于xi的头发,因为xi剪去bi!&#x3D;xi的头发其实没有意义,相当于一直剪去长度为xi的头发,直到这两根xi的头发区间极大值要大于xi时就不能剪了,因为不能剪多,所以这把剪刀就用完了,换下一把剪刀,贪心把所有剪刀都用完了,如果还有目标头发没剪完的,就是不合题意得</p><p>维护区间极值用的是线段树,应该也可以用树状数组</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#define int long long</span><br><span class="hljs-keyword">using</span> namespace std;<br>const <span class="hljs-type">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br>const <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>const <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-type">int</span> a[maxn];<br><span class="hljs-type">int</span> b[maxn];<br><span class="hljs-type">int</span> x[maxn];<br><span class="hljs-type">bool</span> vis[maxn];<br>struct node&#123;<br>    <span class="hljs-type">int</span> l,r,ma;<br>&#125;;<br>node t[maxn*<span class="hljs-number">4</span>];<br><span class="hljs-type">void</span> build(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> idx)&#123;<br>    t[idx].l=l;<br>    t[idx].r=r;<br>    <span class="hljs-keyword">if</span>(r==l)&#123;<br>        t[idx].ma=b[l];<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        build(l,mid,idx*<span class="hljs-number">2</span>);<br>        build(mid+<span class="hljs-number">1</span>,r,idx*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>        t[idx].ma=max(t[idx*<span class="hljs-number">2</span>].ma,t[idx*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>].ma);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> query(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> idx)&#123;<br>    <span class="hljs-keyword">if</span>(t[idx].l==l&amp;&amp;t[idx].r==r)&#123;<br>        <span class="hljs-keyword">return</span> t[idx].ma;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-type">int</span> mid=(t[idx].l+t[idx].r)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(r&lt;=mid)&#123;<br>            <span class="hljs-keyword">return query</span>(l,r,idx*<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l&gt;mid)&#123;<br>            <span class="hljs-keyword">return query</span>(l,r,idx*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> max(query(l,mid,idx*<span class="hljs-number">2</span>),query(mid+<span class="hljs-number">1</span>,r,idx*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> solve() &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">bool</span> f=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n;unordered_map&lt;<span class="hljs-type">int</span>,queue&lt;<span class="hljs-type">int</span>&gt;&gt;mpp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i],vis[i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;b[i];<br>        <br>        <span class="hljs-keyword">if</span>(b[i]&lt;a[i])mpp[b[i]].push(i);<br>        <span class="hljs-keyword">if</span>(b[i]&gt;a[i])f=<span class="hljs-number">1</span>;<br>    &#125;<br>    build(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> m;<br>    cin&gt;&gt;m;<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)cin&gt;&gt;x[i],mp[x[i]]++;<br>    <span class="hljs-keyword">if</span>(f)&#123;<br>        cout&lt;&lt;&quot;NO\n&quot;;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(auto i:mp)&#123;<br>        <span class="hljs-keyword">while</span>(i.second&gt;<span class="hljs-number">0</span>)&#123;<br>            i.second<span class="hljs-comment">--;</span><br>            <span class="hljs-keyword">if</span>(mpp[i.first].empty())break;<br>            <span class="hljs-type">int</span> now=mpp[i.first].front();<br>            mpp[i.first].pop();<br>            vis[now]=<span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> tt=i.first;<br>            <span class="hljs-keyword">while</span>(!mpp[tt].empty())&#123;<br>                <span class="hljs-type">int</span> nw=mpp[tt].front();<br>                <span class="hljs-keyword">if</span>(query(now,nw,<span class="hljs-number">1</span>)&lt;=tt)&#123;<br>                    mpp[tt].pop();<br>                    now=nw;<br>                &#125;<br>                <span class="hljs-keyword">else</span> break;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(auto i:mpp)&#123;<br>        <span class="hljs-keyword">if</span>(!i.second.empty())&#123;<br>//            cout&lt;&lt;i.first&lt;&lt;endl;<br>            cout&lt;&lt;&quot;NO\n&quot;;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;&quot;YES\n&quot;;<br>&#125;<br><br>int32_t main() &#123;<br>    ios::sync_with_stdio(<span class="hljs-keyword">false</span>);<br>    cin.tie(<span class="hljs-number">0</span>), cout.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> T=<span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T<span class="hljs-comment">--) &#123;</span><br>        solve();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>补题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>dsu on tree</title>
    <link href="/2022/11/22/dsu-on-tree/"/>
    <url>/2022/11/22/dsu-on-tree/</url>
    
    <content type="html"><![CDATA[<h1 id="dsu-on-tree"><a href="#dsu-on-tree" class="headerlink" title="dsu on tree"></a>dsu on tree</h1><h2 id="子树颜色种类"><a href="#子树颜色种类" class="headerlink" title="子树颜色种类"></a>子树颜色种类</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>#define int long long<br>#define <span class="hljs-symbol">LL</span> long long<br>const <span class="hljs-symbol">LL</span> mod = <span class="hljs-number">100003</span>;<br>const int maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br>int a[maxn];<br>vector&lt;int&gt;vec[maxn];<br>int sz[maxn];<br>int son[maxn];<br>int f[maxn];<br>void dfs1(int st,int fa)&#123;<br>    sz[st]=<span class="hljs-number">1</span>;<br>    f[st]=fa;<br>    for(auto i:vec[st])&#123;<br>        if(i!=fa)&#123;<br>            dfs1(i,st);<br>            sz[st]+=sz[i];<br>            if(!son[st]||sz[i]&gt;sz[son[st]])&#123;<br>                son[st]=i;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>int dfn=<span class="hljs-number">0</span>;<br>int <span class="hljs-symbol">L</span>[maxn],<span class="hljs-symbol">R</span>[maxn],idx[maxn],top[maxn];<br>void dfs2(int st,int tot)&#123;<br>    <span class="hljs-symbol">L</span>[st]=++dfn;<br>    idx[dfn]=st;<br>    top[st]=tot;<br>    if(son[st])dfs2(son[st],tot);<br>    for(auto i:vec[st])&#123;<br>        if(i!=f[st]&amp;&amp;i!=son[st])&#123;<br>            dfs2(i,i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-symbol">R</span>[st]=dfn;<br>&#125;<br>int skp;<br>int now_as=<span class="hljs-number">0</span>;<br>int ans[maxn],cnt[maxn];<br>void get_data(int x,int op)&#123;<br>    for(int i=<span class="hljs-symbol">L</span>[x];i&lt;=<span class="hljs-symbol">R</span>[x];i++)&#123;<br>        if(idx[i]==skp)&#123;<br>            i=<span class="hljs-symbol">R</span>[idx[i]];<br>            continue;<br>        &#125;<br>        if(op) &#123;<br>            if (++cnt[a[idx[i]]] == <span class="hljs-number">1</span>)++now_as;<br>        &#125;<br>        else &#123;<br>            if (--cnt[a[idx[i]]] == <span class="hljs-number">0</span>)--now_as;<br>        &#125;<br>    &#125;<br>&#125;<br>void dsu(int st)&#123;<br>    for(auto i:vec[st])&#123;<br>        if(i!=f[st]&amp;&amp;i!=son[st])&#123;<br>            dsu(i);<br>        &#125;<br>    &#125;<br>    if(son[st])&#123;<br>        dsu(son[st]);<br>        skp=son[st];<br>    &#125;<br>    get_data(st,<span class="hljs-number">1</span>);<br>    ans[st]=now_as;<br>    if(st==top[st])&#123;<br>        skp=<span class="hljs-number">0</span>;<br>        get_data(st,<span class="hljs-number">0</span>);<br>    &#125;<br>    return ;<br>&#125;<br>void solve()&#123;<br>    int n;<br>    cin&gt;&gt;n;<br>    int q;<br>    cin&gt;&gt;q;<br>    for(int i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        son[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    for(int i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)&#123;<br>        int u,v;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        vec[u].push_back(v);<br>        vec[v].push_back(u);<br>    &#125;<br>    dfs1(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    dfs2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    dsu(<span class="hljs-number">1</span>);<br>//    for(int i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>//        cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;<span class="hljs-symbol">L</span>[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;<span class="hljs-symbol">R</span>[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;son[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;sz[i]&lt;&lt;endl;<br>//    &#125;<br>    while(q--)&#123;<br>        int x;<br>        cin&gt;&gt;x;<br>        cout&lt;&lt;ans[x]&lt;&lt;endl;<br>    &#125;<br>&#125;<br>signed main() &#123;<br>    int <span class="hljs-symbol">T</span>=<span class="hljs-number">1</span>;<br>    //    cin&gt;&gt;<span class="hljs-symbol">T</span>;<br>    while(<span class="hljs-symbol">T</span>--)&#123;<br>        solve();<br>    &#125;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>图的连通性</title>
    <link href="/2022/10/17/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/"/>
    <url>/2022/10/17/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="图的连通性"><a href="#图的连通性" class="headerlink" title="图的连通性"></a>图的连通性</h1><h2 id="tarjan求割点"><a href="#tarjan求割点" class="headerlink" title="tarjan求割点"></a>tarjan求割点</h2><h3 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> head[maxn];<br>struct node&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-keyword">to</span>,val,next;<br>&#125;;<br><span class="hljs-type">int</span> tot=<span class="hljs-number">0</span>;<br>node edge[maxn];<br><span class="hljs-type">void</span> <span class="hljs-keyword">add</span>(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,<span class="hljs-type">int</span> val)&#123;<br>    edge[tot].<span class="hljs-keyword">to</span>=v;<br>    edge[tot].val=val;<br>    edge[tot].next=head[u];<br>    head[u]=tot++;<br>&#125;<br><span class="hljs-type">int</span> dfn[maxn];<br><span class="hljs-type">int</span> low[maxn];<br><span class="hljs-type">int</span> boo[maxn];<br><span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> root;<br><span class="hljs-type">void</span> tarjan(<span class="hljs-type">int</span> x)&#123;<br>    dfn[x]=low[x]=++cnt;<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i!=<span class="hljs-number">-1</span>;i=edge[i].next)&#123;<br>        <span class="hljs-type">int</span> y=edge[i].<span class="hljs-keyword">to</span>;<br>        <span class="hljs-keyword">if</span>(!dfn[y])&#123;<br>            tarjan(y);<br>            low[x]=min(low[x],low[y]);//子树最小low<br>            <span class="hljs-keyword">if</span>(low[y]&gt;=dfn[x])&#123;<br>                flag++;<br>                <span class="hljs-keyword">if</span>(x!=root&amp;&amp;flag&gt;<span class="hljs-number">1</span>)boo[x]=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> low[x]=min(low[x],dfn[y]);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">void</span> solve()&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!dfn[i])&#123;<br>            tarjan(i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网络流</title>
    <link href="/2022/10/14/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    <url>/2022/10/14/%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h1><h2 id="dinic"><a href="#dinic" class="headerlink" title="dinic"></a>dinic</h2><h3 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> namespace std;<br>const <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span>+<span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> d[maxn];<br>vector&lt;<span class="hljs-type">int</span>&gt;vec[maxn];<br><span class="hljs-type">int</span> head[maxn];<br><span class="hljs-type">int</span> nxt[maxn];<br><span class="hljs-type">int</span> tot=<span class="hljs-number">0</span>;<br>struct node&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-keyword">to</span>,val;<br>&#125;;<br>node edge[<span class="hljs-number">2</span>*maxn];<br><span class="hljs-type">void</span> <span class="hljs-keyword">add</span>(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,<span class="hljs-type">int</span> z)&#123;<br>    edge[tot].<span class="hljs-keyword">to</span>=v,edge[tot].val=z,nxt[tot]=head[u],head[u]=tot++;<br>    edge[tot].<span class="hljs-keyword">to</span>=u,edge[tot].val=<span class="hljs-number">0</span>,nxt[tot]=head[v],head[v]=tot++;<br>&#125;<br><span class="hljs-type">bool</span> MakeLevel(<span class="hljs-type">int</span> s,<span class="hljs-type">int</span> t)&#123;<br>    memset(d,<span class="hljs-number">0</span>,sizeof(d));<br>    d[s]=<span class="hljs-number">1</span>;<br>    queue&lt;<span class="hljs-type">int</span>&gt;q;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br>        <span class="hljs-type">int</span> now = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">if</span>(now==t)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[now];~i;i=nxt[i])&#123;<br>            <span class="hljs-keyword">if</span>(edge[i].val&amp;&amp;!d[edge[i].<span class="hljs-keyword">to</span>])&#123;<br>                q.push(edge[i].<span class="hljs-keyword">to</span>);<br>                d[i]=d[now]+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> dfs(<span class="hljs-type">int</span> x ,<span class="hljs-type">int</span> flow,<span class="hljs-type">int</span> t)&#123;<br>    <span class="hljs-keyword">if</span>(x==t)<span class="hljs-keyword">return</span> flow;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];~i;i=nxt[i])&#123;<br>        <span class="hljs-keyword">if</span>((edge[i].val!=<span class="hljs-number">0</span>)&amp;&amp;(d[edge[i].<span class="hljs-keyword">to</span>]==d[x]+<span class="hljs-number">1</span>))&#123;<br>            <span class="hljs-type">int</span> tmp=dfs(edge[i].<span class="hljs-keyword">to</span>,min(flow-sum,edge[i].val),t);<br>            edge[i].val-=tmp;<br>            edge[i^<span class="hljs-number">1</span>].val+=tmp;<br>            sum+=tmp;<br>            <span class="hljs-keyword">if</span>(sum==flow)<span class="hljs-keyword">return</span> sum;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-type">int</span> main() &#123;<br>    <span class="hljs-type">int</span> s,t;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(MakeLevel(s,t))&#123;<br>        ans+=dfs(s,<span class="hljs-number">0x3f3f3f3f</span>,t);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="ISAP"><a href="#ISAP" class="headerlink" title="ISAP"></a>ISAP</h2><h3 id="板子-1"><a href="#板子-1" class="headerlink" title="板子"></a>板子</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> namespace std;<br>const <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span>+<span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> d[maxn];<br>vector&lt;<span class="hljs-type">int</span>&gt;vec[maxn];<br><span class="hljs-type">int</span> head[maxn];<br><span class="hljs-type">int</span> nxt[maxn];<br><span class="hljs-type">int</span> tot=<span class="hljs-number">0</span>;<br>struct node&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-keyword">to</span>,val;<br>&#125;;<br>node edge[<span class="hljs-number">2</span>*maxn];<br><span class="hljs-type">void</span> <span class="hljs-keyword">add</span>(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,<span class="hljs-type">int</span> z)&#123;<br>    edge[tot].<span class="hljs-keyword">to</span>=v,edge[tot].val=z,nxt[tot]=head[u],head[u]=tot++;<br>    edge[tot].<span class="hljs-keyword">to</span>=u,edge[tot].val=<span class="hljs-number">0</span>,nxt[tot]=head[v],head[v]=tot++;<br>&#125;<br><span class="hljs-type">bool</span> MakeLevel(<span class="hljs-type">int</span> s,<span class="hljs-type">int</span> t)&#123;<br>    memset(d,<span class="hljs-number">0</span>,sizeof(d));<br>    d[s]=<span class="hljs-number">1</span>;<br>    queue&lt;<span class="hljs-type">int</span>&gt;q;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br>        <span class="hljs-type">int</span> now = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">if</span>(now==t)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[now];~i;i=nxt[i])&#123;<br>            <span class="hljs-keyword">if</span>(edge[i].val&amp;&amp;!d[edge[i].<span class="hljs-keyword">to</span>])&#123;<br>                q.push(edge[i].<span class="hljs-keyword">to</span>);<br>                d[i]=d[now]+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> S,M;<br><span class="hljs-type">int</span> cntd[maxn];<br><span class="hljs-type">int</span> dfs(<span class="hljs-type">int</span> x ,<span class="hljs-type">int</span> flow,<span class="hljs-type">int</span> t)&#123;<br>    <span class="hljs-keyword">if</span>(x==t)<span class="hljs-keyword">return</span> flow;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];~i;i=nxt[i])&#123;<br>        <span class="hljs-keyword">if</span>(edge[i].val&amp;&amp;(d[x]==d[edge[i].<span class="hljs-keyword">to</span>]+<span class="hljs-number">1</span>))&#123;<br>            <span class="hljs-type">int</span> tmp=dfs(i,min(edge[i].val,flow-sum),t);<br>            edge[i].val-=tmp;<br>            edge[i^<span class="hljs-number">1</span>].val+=tmp;<br>            sum+=tmp;<br>            <span class="hljs-keyword">if</span>(sum==flow)<span class="hljs-keyword">return</span> sum;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(d[S]&gt;=M)<span class="hljs-keyword">return</span> sum;<br>    cntd[d[x]]<span class="hljs-comment">--;</span><br>    <span class="hljs-keyword">if</span>(!cntd[d[x]])d[S]=M;<br>    d[x]++;<br>    cntd[d[x]]++;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-type">int</span> main() &#123;<br>    <span class="hljs-type">int</span> s,t;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    S=s;<br>    MakeLevel(s,t);<br>    <span class="hljs-keyword">while</span>(d[S]&lt;M)&#123;<br>        ans+=dfs(s,<span class="hljs-number">0x3f3f3f3f</span>,t);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>几何板子</title>
    <link href="/2022/09/03/%E5%87%A0%E4%BD%95%E6%9D%BF%E5%AD%90/"/>
    <url>/2022/09/03/%E5%87%A0%E4%BD%95%E6%9D%BF%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h1 id="几何板子"><a href="#几何板子" class="headerlink" title="几何板子"></a>几何板子</h1><h2 id="判断是否是凸多边形"><a href="#判断是否是凸多边形" class="headerlink" title="判断是否是凸多边形"></a>判断是否是凸多边形</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&quot;\n&quot;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> x[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> y[<span class="hljs-number">10</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++)cin&gt;&gt;x[i]&gt;&gt;y[i];<br>    x[<span class="hljs-number">5</span>]=x[<span class="hljs-number">1</span>];<br>    y[<span class="hljs-number">5</span>]=y[<span class="hljs-number">1</span>];<br>    x[<span class="hljs-number">6</span>]=x[<span class="hljs-number">2</span>];<br>    y[<span class="hljs-number">6</span>]=y[<span class="hljs-number">2</span>];<br><span class="hljs-comment">//    x[5]=x[1];</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=<span class="hljs-number">6</span>;i++)&#123;<br>        <span class="hljs-type">int</span> tmp=(x[i]-x[i<span class="hljs-number">-2</span>])*(y[i<span class="hljs-number">-1</span>]-y[i<span class="hljs-number">-2</span>])-(x[i<span class="hljs-number">-1</span>]-x[i<span class="hljs-number">-2</span>])*(y[i]-y[i<span class="hljs-number">-2</span>]);<br>        <span class="hljs-keyword">if</span>(tmp&gt;<span class="hljs-number">0</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//    ios::sync_with_stdio(false);</span><br><span class="hljs-comment">//    cin.tie(0), cout.tie(0);</span><br>    <span class="hljs-type">int</span> T=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//    cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>树链剖分</title>
    <link href="/2022/08/08/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    <url>/2022/08/08/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h1><h2 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs inform7">int sz<span class="hljs-comment">[maxn]</span>;<br>int fa<span class="hljs-comment">[maxn]</span>;<br>int son<span class="hljs-comment">[maxn]</span>;<br>int depth<span class="hljs-comment">[maxn]</span>;<br>vector&lt;int&gt;vec<span class="hljs-comment">[maxn]</span>;<br>void dfs1(int st,int f,int deep)&#123;<br>    sz<span class="hljs-comment">[st]</span>=1;<br>    fa<span class="hljs-comment">[st]</span>=f;<br>    depth<span class="hljs-comment">[st]</span>=deep;<br>    for(auto i:vec<span class="hljs-comment">[st]</span>)&#123;<br>        if(i!=f)&#123;<br>            dfs1(i,st,deep+1);<br>            sz<span class="hljs-comment">[st]</span>+=sz<span class="hljs-comment">[i]</span>;<br>            if(son<span class="hljs-comment">[st]</span>==0||sz<span class="hljs-comment">[son<span class="hljs-comment">[st]</span>]</span>&lt;sz<span class="hljs-comment">[i]</span>)&#123;<br>                son<span class="hljs-comment">[st]</span>=i;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>int id<span class="hljs-comment">[maxn]</span>;<br>int idx<span class="hljs-comment">[maxn]</span>;<br>int dfn=0;<br>int top<span class="hljs-comment">[maxn]</span>;<br>int R<span class="hljs-comment">[maxn]</span>;<br>void dfs2(int st,int f)&#123;<br>    id<span class="hljs-comment">[st]</span>=++dfn;<br>    idx<span class="hljs-comment">[st]</span>=dfn;<br>    top<span class="hljs-comment">[st]</span>=f;<br>    if(son<span class="hljs-comment">[st]</span>)dfs2(son<span class="hljs-comment">[st]</span>,f);<br>    for(auto i:vec<span class="hljs-comment">[st]</span>)&#123;<br>        if(i!=son<span class="hljs-comment">[st]</span>&amp;&amp;i!=fa<span class="hljs-comment">[i]</span>)&#123;<br>            dfs2(i,i);<br>        &#125;<br>    &#125;<br>&#125;<br>int Lca(int x,int y)&#123;<br>    while(top<span class="hljs-comment">[x]</span>!=top<span class="hljs-comment">[y]</span>)&#123;<br>        if(depth<span class="hljs-comment">[x]</span>&lt;depth<span class="hljs-comment">[y]</span>)swap(x,y);<br>        x=fa<span class="hljs-comment">[top<span class="hljs-comment">[x]</span>]</span>;<br>    &#125;<br>    if(depth<span class="hljs-comment">[x]</span>&lt;depth<span class="hljs-comment">[y]</span>)swap(x,y);<br>    return y;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Eezie-and-Pie"><a href="#Eezie-and-Pie" class="headerlink" title="Eezie and Pie"></a>Eezie and Pie</h2><p><a href="https://ac.nowcoder.com/acm/contest/33191/B">题源</a></p><p>题意 :给定一颗树,每个端点都有对应的能量,每个端点都可以消耗1能量来向上一个节点送pie,询问每个端点最多能被送几个pie</p><p>解析 :最朴素的想法肯定是对每一个端点都消耗完能量来向父节点送派,遇到的问题为如果每个点都往上爬它对应能量数量的点,那复杂度将为O(n2),那如果可以将每个点往上爬更新父节点的时间代价降为log级,就可以用最朴素的想法实现该题.那只要树链剖分后维护一个当前所剩能量power,往上跳点时比较power和当前所在点now与链首top[now]的距离(可以用id[now]和id[top[now]]来O(1)实现),据题意模拟,因为相当于每次会对一段区间进行+1处理,所以用前缀和处理区间操作即可.具体实现上要注意根节点的处理,在处理时要注意1号节点往上更新时会更新到0号节点,要将更新0号节点的操作变为更新1号节点.还要注意每个点对自身送pie是不需要消耗能量的,初始可以将pre[1]设成1(前缀和后相当于每个点答案设成了1),在树剖模拟时就不用处理自身的点了(因为自身点不需要代价,因此模拟可能会有点多要考虑的).</p><p>代码: </p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#include &lt;bits/stdc++.h&gt;<br>#include&lt;stack&gt;<br>#include&lt;vector&gt;<br>using namespace std;<br>const int maxn = <span class="hljs-number">2e6</span>+<span class="hljs-number">5</span>;<br>int sz[maxn];<br>int son[maxn];<br>int fa[maxn];<br>vector&lt;int&gt;vec[maxn];<br>void dfs1(int st,int f)&#123;<br>    sz[st]=<span class="hljs-number">1</span>;<br>    fa[st]=f;<br>    for(auto i:vec[st])&#123;<br>        if(i!=f)&#123;<br>            dfs1(i,st);<br>            sz[st]+=sz[i];<br>            if(son[st]==<span class="hljs-number">0</span>||sz[son[st]]&lt;sz[i])son[st]=i;<br>        &#125;                           <br>    &#125;<br>&#125;<br>int dfn=<span class="hljs-number">0</span>;<br>int id[maxn];<br>int idx[maxn];<br>int top[maxn];<br>void dfs2(int st,int f)&#123;<br>    id[st]=++dfn;<br>    idx[dfn]=st;<br>    top[st]=f;<br>    if(son[st])dfs2(son[st],f);<br>    for(auto i:vec[st])&#123;<br>        if(i!=fa[st]&amp;&amp;i!=son[st])&#123;<br>            dfs2(i,i);<br>        &#125;<br>    &#125;<br>&#125;<br>int d[maxn];<br>int pre[maxn];<br>void <span class="hljs-symbol">Lca</span>(int x)&#123;<br>    int power=d[x];<br>    int now=fa[x];<br>//     pre[x]++;<br>    while(now!=<span class="hljs-number">0</span>&amp;&amp;power&gt;<span class="hljs-number">0</span>)&#123;<br>        if(power&gt;=id[now]-id[top[now]]+<span class="hljs-number">1</span>)&#123;<br>            power-=(id[now]-id[top[now]]+<span class="hljs-number">1</span>);<br>//              cout&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;id[top[now]]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;id[now]&lt;&lt;<span class="hljs-string">&quot; X&quot;</span>&lt;&lt;endl;<br>            pre[id[now]+<span class="hljs-number">1</span>]--;<br>            pre[id[top[now]]]++;<br>        &#125;<br>        else&#123;<br>//             cout&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;id[now-power+<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;id[now]&lt;&lt;<span class="hljs-string">&quot; Y&quot;</span>&lt;&lt;endl;<br>            pre[id[now]-power+<span class="hljs-number">1</span>]++;<br>            pre[id[now]+<span class="hljs-number">1</span>]--;<br>            break;<br>        &#125;<br>        now=fa[top[now]];<br>    &#125;<br>&#125;<br>vector&lt;int&gt;as;<br>void solve() &#123;<br>    memset(pre,<span class="hljs-number">0</span>,sizeof(pre));<br>    int n;<br>    cin&gt;&gt;n;<br>    as.clear();<br>    for(int i=<span class="hljs-number">1</span>;i&lt;=n;i++)vec[i].clear();<br>    for(int i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        int t1,t2;<br>        cin&gt;&gt;t1&gt;&gt;t2;<br>        vec[t1].push_back(t2);<br>        vec[t2].push_back(t1);<br>    &#125;<br>    for(int i=<span class="hljs-number">1</span>;i&lt;=n;i++)cin&gt;&gt;d[i];<br>    dfs1(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    dfs2(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    top[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    fa[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    pre[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    id[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    id[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    for(int i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-symbol">Lca</span>(i);<br>    &#125;<br>    for(int i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        pre[i]+=pre[i<span class="hljs-number">-1</span>];<br>    &#125;<br>    for(int i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        cout&lt;&lt;pre[id[i]]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout&lt;&lt;pre[id[n]]&lt;&lt;endl;<br>&#125;<br><br>int main() &#123;<br>    ios::sync_with_stdio(false);<br>    cin.tie(<span class="hljs-number">0</span>), cout.tie(<span class="hljs-number">0</span>);<br>    int <span class="hljs-symbol">T</span> = <span class="hljs-number">1</span>;<br>    while (<span class="hljs-symbol">T</span>--) &#123;<br>        solve();<br>    &#125;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces  补题</title>
    <link href="/2022/08/03/Codeforces%E8%A1%A5%E9%A2%98/"/>
    <url>/2022/08/03/Codeforces%E8%A1%A5%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-补题"><a href="#Codeforces-补题" class="headerlink" title="Codeforces  补题"></a>Codeforces  补题</h1><h2 id="Color-with-Occurrences"><a href="#Color-with-Occurrences" class="headerlink" title="Color with Occurrences"></a>Color with Occurrences</h2><p>题源 : <a href="https://codeforces.com/contest/1714/problem/D">Color with Occurrences</a></p><p>题目大意 : 给一个原字符串,再给若干个长度小于原串的子串,询问最少由几个子串拼成原串(有拼不出来的情况)</p><p>思路 : 题目数据范围给得小,往暴力求解的方向想,从原串起点出发,尽可能选能覆盖最多原串尚未覆盖的子串,对于原串每一个点,都求一次选择以该点开头的子串最多覆盖到原串的哪里,记一个该点选子串所能覆盖原串最远覆盖距离tr;定义一个原串最远可覆盖距离r;原串已被覆盖距离cover.当枚举的该点</p><p>坐标大于已被覆盖距离cover时,即需要在前面枚举的点中提取一个可行的最远覆盖距离来更新已覆盖距离,每个点枚举tr时,r更新为r与tr的最大值,即r为前面枚举的点所能覆盖的最长距离,当更新cover时,如果前面点所能覆盖的最远距离r都要小于等于 该点坐标i(即没办法将已覆盖距离往后延长,后面的点没办法用子串覆盖到),那就是无法构造原串,输出-1; 若可往后覆盖,那将cover更新为前面点所能覆盖到的最长距离r,只有cover更新时才需要记录答案,在更新最长覆盖距离r时可以记下当前题干所需的所选子串种类,当前点坐标,那cover更新时就可以记下</p><p>代码 :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-comment">//#define int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>string a[maxn];<br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; vec;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    vec.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-type">int</span> sz = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> cover = <span class="hljs-number">-1</span>;                <span class="hljs-type">int</span> tloc = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, r = <span class="hljs-number">-1</span>, tidx = <span class="hljs-number">-1</span>; i &lt; sz &amp;&amp; r &lt; sz; i++) &#123;<br>        <span class="hljs-type">int</span> ttidx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> tr = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (i + a[j].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> &lt; sz &amp;&amp; s.<span class="hljs-built_in">substr</span>(i, a[j].<span class="hljs-built_in">size</span>()) == a[j] &amp;&amp; i + a[j].<span class="hljs-built_in">size</span>() &gt; tr) &#123;<br>                ttidx = j;<br>                tr = i + a[j].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ttidx != <span class="hljs-number">-1</span> &amp;&amp; tr &gt; r) &#123;<br>            r = tr;<br>            tidx=ttidx;<br>            tloc=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//            vec.push_back(&#123;tidx, i + 1&#125;);</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &gt; cover) &#123;<br>            <span class="hljs-keyword">if</span>(i &gt; r)&#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            vec.<span class="hljs-built_in">push_back</span>(&#123;tidx,tloc&#125;);<br>            cover=r;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; vec.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i:vec) &#123;<br>        cout &lt;&lt; i.first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; i.second &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><hr><h2 id="Build-Permutation"><a href="#Build-Permutation" class="headerlink" title="Build Permutation"></a>Build Permutation</h2><p><a href="https://codeforces.com/contest/1713/problem/C">题源</a></p><p>题意: 给定一个n,要求对于0到n-1来说,构造一个同样时0到n-1的一个排列,对应位相加为完全平方数</p><p>解析: 那对于n-1来说,大于n-1且距离最近的完全平方数与n-1的差值一定小于n-1,从大到小没有操作过的数进行操作,当前数x找到最近的完全平方数i后,x+(i-x)就为完全平方数,x往前数i-x个数也可变为完全平方数i(i-x+x),再往未操作的数(i-x-1)开始进行该操作</p><p>代码: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">int</span> tc=<span class="hljs-built_in">sqrt</span>(x);<br>    <span class="hljs-keyword">return</span> tc*tc==x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;=<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=x;;i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Check</span>(i))&#123;<br>            <span class="hljs-type">int</span> t=(i-x);<br>            <span class="hljs-built_in">solve</span>(t<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=x;j&gt;=t;j--)&#123;<br>                cout&lt;&lt;j&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-comment">//                t--;</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-type">int</span> n;<br>        cin&gt;&gt;n;<br>        <span class="hljs-built_in">solve</span>(n<span class="hljs-number">-1</span>);<br>        cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>补题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二分图算法整理</title>
    <link href="/2022/07/30/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <url>/2022/07/30/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二分图算法整理"><a href="#二分图算法整理" class="headerlink" title="二分图算法整理"></a>二分图算法整理</h1><h2 id="二分图黑白染色"><a href="#二分图黑白染色" class="headerlink" title="二分图黑白染色"></a>二分图黑白染色</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> col[maxn];<br>vector&lt;<span class="hljs-type">int</span>&gt;vec[maxn];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> st,<span class="hljs-type">int</span> fa,<span class="hljs-type">int</span> ty)</span></span>&#123;<br>    col[st]=ty;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:vec[st])&#123;<br>        <span class="hljs-keyword">if</span>(i!=fa)&#123;<br>            <span class="hljs-keyword">if</span>(!col[i])&#123;<br>                <span class="hljs-built_in">dfs</span>(i,st,ty%<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(col[i]==ty)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>按黑白双色深搜即可</p><hr><h2 id="二分图最大匹配-增广路算法"><a href="#二分图最大匹配-增广路算法" class="headerlink" title="二分图最大匹配 增广路算法"></a>二分图最大匹配 增广路算法</h2><h3 id="增广路算法代码"><a href="#增广路算法代码" class="headerlink" title="增广路算法代码"></a>增广路算法代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt;vec[maxn];<br><span class="hljs-type">int</span> link[maxn];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> st)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:vec[st])&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i])&#123;<br>            <span class="hljs-keyword">if</span>(!link[i]||<span class="hljs-built_in">dfs</span>(i))&#123;<br>                link[i]=st;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="增广路算法的解析"><a href="#增广路算法的解析" class="headerlink" title="增广路算法的解析"></a>增广路算法的解析</h3><p>主函数调用时对每一个点都调用一次连边的深搜,深搜一次代价为o(m),复杂度为O(n*m)</p><p>最小点覆盖等于最大匹配数</p><p>算法大意是在找增广路，一个点在向他所连边的点进行一次连边请求，如果连边的点没有被连过边，那直接将该点与连边点相连；如果连边的点已被其他点所连，那会让那个点去连其它没有连过的点，如果连接成功，则那个点和新进的点相连，初始点和连边点相连，在每一次连边都是这样处理，最后能有连接成功的就新进了一个点，如果访问了所有点都不行，那该点就连接失败</p><h2 id="二分图最优匹配-KM算法"><a href="#二分图最优匹配-KM算法" class="headerlink" title="二分图最优匹配  ＫＭ算法"></a>二分图最优匹配  ＫＭ算法</h2>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
