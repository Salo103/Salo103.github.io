<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/08/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    <url>/2022/08/08/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h1><h2 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs inform7">int sz<span class="hljs-comment">[maxn]</span>;<br>int fa<span class="hljs-comment">[maxn]</span>;<br>int son<span class="hljs-comment">[maxn]</span>;<br>int depth<span class="hljs-comment">[maxn]</span>;<br>vector&lt;int&gt;vec<span class="hljs-comment">[maxn]</span>;<br>void dfs1(int st,int f,int deep)&#123;<br>    sz<span class="hljs-comment">[st]</span>=1;<br>    fa<span class="hljs-comment">[st]</span>=f;<br>    depth<span class="hljs-comment">[st]</span>=deep;<br>    for(auto i:vec<span class="hljs-comment">[st]</span>)&#123;<br>        if(i!=f)&#123;<br>            dfs1(i,st,deep+1);<br>            sz<span class="hljs-comment">[st]</span>+=sz<span class="hljs-comment">[i]</span>;<br>            if(son<span class="hljs-comment">[st]</span>==0||sz<span class="hljs-comment">[son<span class="hljs-comment">[st]</span>]</span>&lt;sz<span class="hljs-comment">[i]</span>)&#123;<br>                son<span class="hljs-comment">[st]</span>=i;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>int id<span class="hljs-comment">[maxn]</span>;<br>int idx<span class="hljs-comment">[maxn]</span>;<br>int dfn=0;<br>int top<span class="hljs-comment">[maxn]</span>;<br>int R<span class="hljs-comment">[maxn]</span>;<br>void dfs2(int st,int f)&#123;<br>    id<span class="hljs-comment">[st]</span>=++dfn;<br>    idx<span class="hljs-comment">[st]</span>=dfn;<br>    top<span class="hljs-comment">[st]</span>=f;<br>    if(son<span class="hljs-comment">[st]</span>)dfs2(son<span class="hljs-comment">[st]</span>,f);<br>    for(auto i:vec<span class="hljs-comment">[st]</span>)&#123;<br>        if(i!=son<span class="hljs-comment">[st]</span>&amp;&amp;i!=fa<span class="hljs-comment">[i]</span>)&#123;<br>            dfs2(i,i);<br>        &#125;<br>    &#125;<br>&#125;<br>int Lca(int x,int y)&#123;<br>    while(top<span class="hljs-comment">[x]</span>!=top<span class="hljs-comment">[y]</span>)&#123;<br>        if(depth<span class="hljs-comment">[x]</span>&lt;depth<span class="hljs-comment">[y]</span>)swap(x,y);<br>        x=fa<span class="hljs-comment">[top<span class="hljs-comment">[x]</span>]</span>;<br>    &#125;<br>    if(depth<span class="hljs-comment">[x]</span>&lt;depth<span class="hljs-comment">[y]</span>)swap(x,y);<br>    return y;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces  补题</title>
    <link href="/2022/08/03/Codeforces%E8%A1%A5%E9%A2%98/"/>
    <url>/2022/08/03/Codeforces%E8%A1%A5%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-补题"><a href="#Codeforces-补题" class="headerlink" title="Codeforces  补题"></a>Codeforces  补题</h1><h2 id="Color-with-Occurrences"><a href="#Color-with-Occurrences" class="headerlink" title="Color with Occurrences"></a>Color with Occurrences</h2><p>题源 : <a href="https://codeforces.com/contest/1714/problem/D">Color with Occurrences</a></p><p>题目大意 : 给一个原字符串,再给若干个长度小于原串的子串,询问最少由几个子串拼成原串(有拼不出来的情况)</p><p>思路 : 题目数据范围给得小,往暴力求解的方向想,从原串起点出发,尽可能选能覆盖最多原串尚未覆盖的子串,对于原串每一个点,都求一次选择以该点开头的子串最多覆盖到原串的哪里,记一个该点选子串所能覆盖原串最远覆盖距离tr;定义一个原串最远可覆盖距离r;原串已被覆盖距离cover.当枚举的该点</p><p>坐标大于已被覆盖距离cover时,即需要在前面枚举的点中提取一个可行的最远覆盖距离来更新已覆盖距离,每个点枚举tr时,r更新为r与tr的最大值,即r为前面枚举的点所能覆盖的最长距离,当更新cover时,如果前面点所能覆盖的最远距离r都要小于等于 该点坐标i(即没办法将已覆盖距离往后延长,后面的点没办法用子串覆盖到),那就是无法构造原串,输出-1; 若可往后覆盖,那将cover更新为前面点所能覆盖到的最长距离r,只有cover更新时才需要记录答案,在更新最长覆盖距离r时可以记下当前题干所需的所选子串种类,当前点坐标,那cover更新时就可以记下</p><p>代码 :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-comment">//#define int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>string a[maxn];<br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; vec;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    vec.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-type">int</span> sz = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> cover = <span class="hljs-number">-1</span>;                <span class="hljs-type">int</span> tloc = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, r = <span class="hljs-number">-1</span>, tidx = <span class="hljs-number">-1</span>; i &lt; sz &amp;&amp; r &lt; sz; i++) &#123;<br>        <span class="hljs-type">int</span> ttidx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> tr = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (i + a[j].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> &lt; sz &amp;&amp; s.<span class="hljs-built_in">substr</span>(i, a[j].<span class="hljs-built_in">size</span>()) == a[j] &amp;&amp; i + a[j].<span class="hljs-built_in">size</span>() &gt; tr) &#123;<br>                ttidx = j;<br>                tr = i + a[j].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ttidx != <span class="hljs-number">-1</span> &amp;&amp; tr &gt; r) &#123;<br>            r = tr;<br>            tidx=ttidx;<br>            tloc=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//            vec.push_back(&#123;tidx, i + 1&#125;);</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &gt; cover) &#123;<br>            <span class="hljs-keyword">if</span>(i &gt; r)&#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            vec.<span class="hljs-built_in">push_back</span>(&#123;tidx,tloc&#125;);<br>            cover=r;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; vec.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i:vec) &#123;<br>        cout &lt;&lt; i.first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; i.second &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int32_t</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二分图算法整理</title>
    <link href="/2022/07/30/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <url>/2022/07/30/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二分图算法整理"><a href="#二分图算法整理" class="headerlink" title="二分图算法整理"></a>二分图算法整理</h1><h2 id="二分图黑白染色"><a href="#二分图黑白染色" class="headerlink" title="二分图黑白染色"></a>二分图黑白染色</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> col[maxn];<br>vector&lt;<span class="hljs-type">int</span>&gt;vec[maxn];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> st,<span class="hljs-type">int</span> fa,<span class="hljs-type">int</span> ty)</span></span>&#123;<br>    col[st]=ty;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:vec[st])&#123;<br>        <span class="hljs-keyword">if</span>(i!=fa)&#123;<br>            <span class="hljs-keyword">if</span>(!col[i])&#123;<br>                <span class="hljs-built_in">dfs</span>(i,st,ty%<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(col[i]==ty)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>按黑白双色深搜即可</p><hr><h2 id="二分图最大匹配-增广路算法"><a href="#二分图最大匹配-增广路算法" class="headerlink" title="二分图最大匹配 增广路算法"></a>二分图最大匹配 增广路算法</h2><h3 id="增广路算法代码"><a href="#增广路算法代码" class="headerlink" title="增广路算法代码"></a>增广路算法代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt;vec[maxn];<br><span class="hljs-type">int</span> link[maxn];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> st)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:vec[st])&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i])&#123;<br>            <span class="hljs-keyword">if</span>(!link[i]||<span class="hljs-built_in">dfs</span>(i))&#123;<br>                link[i]=st;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="增广路算法的解析"><a href="#增广路算法的解析" class="headerlink" title="增广路算法的解析"></a>增广路算法的解析</h3><p>主函数调用时对每一个点都调用一次连边的深搜,深搜一次代价为o(m),复杂度为O(n*m)</p><p>最小点覆盖等于最大匹配数</p><p>算法大意是在找增广路，一个点在向他所连边的点进行一次连边请求，如果连边的点没有被连过边，那直接将该点与连边点相连；如果连边的点已被其他点所连，那会让那个点去连其它没有连过的点，如果连接成功，则那个点和新进的点相连，初始点和连边点相连，在每一次连边都是这样处理，最后能有连接成功的就新进了一个点，如果访问了所有点都不行，那该点就连接失败</p><h2 id="二分图最优匹配-KM算法"><a href="#二分图最优匹配-KM算法" class="headerlink" title="二分图最优匹配  ＫＭ算法"></a>二分图最优匹配  ＫＭ算法</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
